using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using IFluent.Движок.Ошибки;
using IFluent.Движок.Типы;

namespace IFluent.Движок.Сущности
{
    internal class Игра
    {
        static Игра()
        {
            Console.OutputEncoding = Encoding.UTF8;
        }

        private Игра(ОписаниеИгры описаниеИгры)
        {
            Имя = описаниеИгры.ИмяИгры;
            Локации = описаниеИгры.СписокЛокаций;
            Настройки = описаниеИгры.НастройкиИгры;
        }

        public Настройки Настройки { get; }

        private List<Локация> Локации { get; }

        private Текст Имя { get; }

        public static ОписаниеИгры НоваяИгра()
        {
            return new ОписаниеИгры();
        }

        internal class ОписаниеИгры
        {
            public ОписаниеИгры Имя(Текст имяИгры)
            {
                ИмяИгры = имяИгры;
                return this;
            }

            public Текст ИмяИгры { get; private set; }

            public Игра ЗавершитьСоздание()
            {
                return new Игра(this);
            }

            public ОписаниеЛокаций Локации()
            {
                return new ОписаниеЛокаций(this);
            }

            internal class ОписаниеЛокаций
            {
                private readonly ОписаниеИгры _описаниеИгры;

                public ОписаниеЛокаций(ОписаниеИгры описаниеИгры)
                {
                    _описаниеИгры = описаниеИгры;
                }

/*
                public ОписаниеЛокаций Локация(Текст название, Текст описание)
                {
                    СоздатьЛокацию(название, описание);
                    return this;
                }
*/

/*
                private void СоздатьЛокацию(Текст название, Текст описание)
                {
                    СписокЛокаций.Add(new Локация(название, описание));
                }
*/

                /*
                    /// версия с открытием описания локации, закывающаяся КонецЛокации()
                    public ОписаниеЛокации Локация(Текст название, Текст описание)
                    {
                        return new ОписаниеЛокации(this, название, описание);
                    }
                */

                internal class ОписаниеЛокации
                {
                    private readonly ОписаниеЛокаций _описаниеЛокаций;
                    public Локация Локация { get; }
                    public List<Кнопка> Кнопки { get; } = new List<Кнопка>();
                    public Текст Название { get; }
                    public Текст Описание { get; }

                    public ОписаниеЛокации(ОписаниеЛокаций описаниеЛокаций, Текст название, Текст описание)
                    {
                        _описаниеЛокаций = описаниеЛокаций;
                        Название = название;
                        Описание = описание;
                    }

                    public ОписаниеЛокации(ОписаниеЛокаций описаниеЛокаций, Локация локация)
                    {
                        _описаниеЛокаций = описаниеЛокаций;
                        Локация = локация;
                    }

                    public ОписаниеЛокаций КонецЛокации()
                    {
                        _описаниеЛокаций.ДобавитьЛокацию(this);
                        return _описаниеЛокаций;
                    }

                    public ОписаниеЛокации Кнопка(Текст надпись, Локация локация)
                    {
                        Кнопки.Add(new Кнопка(надпись, локация));
                        return this;
                    }
                }

                private void ДобавитьЛокацию(ОписаниеЛокации описаниеЛокации)
                {
                    // добавляем локацию, если она была задана ранее и кнопки, если они были добавлены позже
                    Локация локация = описаниеЛокации.Локация.СлитьСОписанием(описаниеЛокации);
                    СписокЛокаций.Add(локация);
                }

                private List<Локация> СписокЛокаций { get; } = new List<Локация>();

                public ОписаниеИгры КонецЛокаций()
                {
                    _описаниеИгры.СписокЛокаций = СписокЛокаций;
                    return _описаниеИгры;
                }

                public ОписаниеЛокации Локация(Локация локация)
                {
                    //СписокЛокаций.Add(локация);
                    return new ОписаниеЛокации(this, локация);
                }
            }

            public List<Локация> СписокЛокаций { get; private set; }

            public ОписаниеНастроек Настройки()
            {
                return new ОписаниеНастроек(this);
            }

            internal class ОписаниеНастроек
            {
                private readonly ОписаниеИгры _описаниеИгры;
                public Локация ИгрокВЛокации { get; private set; }

                public ОписаниеНастроек(ОписаниеИгры описаниеИгры)
                {
                    _описаниеИгры = описаниеИгры;
                }

                public ОписаниеНастроек НачатьВЛокации(Текст названиеЛокации)
                {
                    Локация локация = _описаниеИгры.СписокЛокаций.Find(л => ((string)л.Название).Equals(названиеЛокации, StringComparison.OrdinalIgnoreCase));

                    ИгрокВЛокации = локация ?? throw new ОшибкаОписания(
                                        $"Настройка \"НачатьВЛокации\" ссылается на несуществующую локацию \"{названиеЛокации}\".");

                    return this;
                }

                public ОписаниеИгры КонецНастроек()
                {
                    _описаниеИгры.НастройкиИгры = new Настройки(this);
                    return _описаниеИгры;
                }

                public ОписаниеНастроек НачатьВЛокации(Локация локация)
                {
                    ИгрокВЛокации = локация;
                    return this;
                }
            }

            public Настройки НастройкиИгры { get; private set; }
        }

        public void ЗапуститьИгру()
        {
            Вывести($"Запускается игра \"{Имя}\"...");
            Текст списокЛокаций = string.Join("",
                Локации.Select(локация =>
                {
                    string текстКнопок = локация.Кнопки.Count > 0
                        ? string.Join(", ",
                            локация.Кнопки.Select(кнопка =>
                                $"\"{кнопка.Надпись}\" => {кнопка.Локация?.Название}"))
                        : "нет";
                    return $"\n\t{локация.Название} (кнопки: {текстКнопок})";
                }));
            Вывести($"Локации игры: {списокЛокаций}");
            Вывести($"Игрок начинает в локации \"{Настройки.ИгрокВЛокации}\".");

            Вывести("Игра запущена.");
            Вывести("Для входа нажмите Esc", true);

            ЗапуститьЦиклИгры();

            ОжидатьКлавишу("Игра звершена. Нажмите любую клавишу для выхода.");
        }

        private void ЗапуститьЦиклИгры()
        {
            Локация текущаяЛокация = Настройки.ИгрокВЛокации ?? Локации.FirstOrDefault();
            if (текущаяЛокация == null)
            {
                throw new ОшибкаОписания("Не задана стартовая локация либо локаций нет вовсе.");
            }

            var вышли = false;
            do
            {
                Вывести($"\n{текущаяЛокация.Название}", выделить: true);
                Вывести($"{текущаяЛокация.Описание}");
                var списокКнопок = текущаяЛокация.Кнопки.Select((кнопка, номер) => new
                {
                    Номер = номер + 1,
                    Текст = $"\t{номер + 1} - {кнопка.Надпись}",
                    кнопка.Локация
                }).ToList();
                Вывести(string.Join("\n", списокКнопок.Select(кнопка => кнопка.Текст)));

                var клавиша = 0;
                bool клавишаПодходит;
                do
                {
                    ConsoleKeyInfo keyInfo = ОжидатьКлавишу();
                    if (keyInfo.Key == ConsoleKey.Escape)
                    {
                        вышли = true;
                        break;
                    }
                    bool этоЧисло = int.TryParse(keyInfo.KeyChar.ToString(), out клавиша);
                    клавишаПодходит = этоЧисло && клавиша >= 1 && клавиша <= текущаяЛокация.Кнопки.Count;
                } while (!клавишаПодходит);
                if (!вышли)
                {
                    текущаяЛокация = списокКнопок.Single(but => but.Номер == клавиша).Локация;
                }
            } while (!вышли);
        }

        private static void Вывести(Текст текст, bool выделить = false)
        {
            if (выделить)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.BackgroundColor = ConsoleColor.DarkGray;
            }
            Console.WriteLine(текст);
            Console.ResetColor();
        }

        public static ConsoleKeyInfo ОжидатьКлавишу(Текст сообщение = null)
        {
            if (сообщение != null)
            {
                Вывести(сообщение);
            }
            return Console.ReadKey(true);
        }

        public static void Вывести(ОшибкаОписания ошибкаОписания)
        {
            Вывести("При загрузке игры произошла ошибка:");
            Вывести($"\t{ошибкаОписания.Message}");
        }

        public static Локация Локация(Текст название, Текст описание)
        {
            return new Локация(название, описание);
        }
    }
}