using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace IFluent
{ 
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                Игра.Новая()
                    .Имя("Пробная игра")
                    .Локации()
                        .Локация("Пещера", "Холодная и мрачная пещера")
                        .Локация("Поляна", "Светлая и приветливая полянка")
                    .КонецЛокаций()
                    .Настройки()
                        .НачатьВЛокации("Пещера")
                    .КонецНастроек()
                .ЗавершитьСоздание()
                .ЗапуститьИгру();
            }
            catch (ОшибкаОписания ошибкаОписания)
            {
                Игра.Вывести(ошибкаОписания);
                Игра.ОжидатьКлавишу("Нажмите любую клавишу для выхода.");
            }
        }
    }

    internal class Игра
    {
        static Игра()
        {
            Console.OutputEncoding = Encoding.UTF8;
        }

        private Игра(ОписаниеИгры описаниеИгры)
        {
            Имя = описаниеИгры.ИмяИгры;
            Локации = описаниеИгры.СписокЛокаций;
            Настройки = описаниеИгры.НастройкиИгры;
        }

        public Настройки Настройки { get; }

        private List<Локация> Локации { get; }

        private string Имя { get; }

        public static ОписаниеИгры Новая()
        {
            return new ОписаниеИгры();
        }

        internal class ОписаниеИгры
        {
            public ОписаниеИгры Имя(string имяИгры)
            {
                ИмяИгры = имяИгры;
                return this;
            }

            public string ИмяИгры { get; private set; }

            public Игра ЗавершитьСоздание()
            {
                return new Игра(this);
            }

            public ОписаниеЛокаций Локации()
            {
                return new ОписаниеЛокаций(this);
            }

            internal class ОписаниеЛокаций
            {
                private readonly ОписаниеИгры _описаниеИгры;

                public ОписаниеЛокаций(ОписаниеИгры описаниеИгры)
                {
                    _описаниеИгры = описаниеИгры;
                }

                public ОписаниеЛокаций Локация(string название, string описание)
                {
                    СоздатьЛокацию(название, описание);
                    return this;
                }

                private void СоздатьЛокацию(string название, string описание)
                {
                    СписокЛокаций.Add(new Локация(название, описание));
                }

                /*
                    /// версия с открытием описания локации, закывающаяся КонецЛокации()
                    public ОписаниеЛокации Локация(string название, string описание)
                    {
                        return new ОписаниеЛокации(this, название, описание);
                    }
                */

                internal class ОписаниеЛокации
                {
                    private readonly ОписаниеЛокаций _описаниеЛокаций;
                    public string Название { get; }
                    public string Описание { get; }

                    public ОписаниеЛокации(ОписаниеЛокаций описаниеЛокаций, string название, string описание)
                    {
                        _описаниеЛокаций = описаниеЛокаций;
                        Название = название;
                        Описание = описание;
                    }

                    public ОписаниеЛокаций КонецЛокации()
                    {
                        _описаниеЛокаций.СоздатьЛокацию(this);
                        return _описаниеЛокаций;
                    }
                }

                private void СоздатьЛокацию(ОписаниеЛокации описаниеЛокации)
                {
                    СписокЛокаций.Add(new Локация(описаниеЛокации));
                }

                private List<Локация> СписокЛокаций { get; } = new List<Локация>();

                public ОписаниеИгры КонецЛокаций()
                {
                    _описаниеИгры.СписокЛокаций = СписокЛокаций;
                    return _описаниеИгры;
                }
            }

            public List<Локация> СписокЛокаций { get; private set; }

            public ОписаниеНастроек Настройки()
            {
                return new ОписаниеНастроек(this);
            }

            internal class ОписаниеНастроек
            {
                private readonly ОписаниеИгры _описаниеИгры;
                public Локация ИгрокВЛокации { get; private set; }

                public ОписаниеНастроек(ОписаниеИгры описаниеИгры)
                {
                    _описаниеИгры = описаниеИгры;
                }

                public ОписаниеНастроек НачатьВЛокации(string названиеЛокации)
                {
                    Локация локация = _описаниеИгры.СписокЛокаций.Find(л => л.Название.Equals(названиеЛокации, StringComparison.OrdinalIgnoreCase));

                    ИгрокВЛокации = локация ?? throw new ОшибкаОписания(
                                               $"Настройка \"НачатьВЛокации\" ссылается на несуществующую локацию \"{названиеЛокации}\".");

                    return this;
                }

                public ОписаниеИгры КонецНастроек()
                {
                    _описаниеИгры.НастройкиИгры = new Настройки(this);
                    return _описаниеИгры;
                }
            }

            public Настройки НастройкиИгры { get; private set; }
        }

        public void ЗапуститьИгру()
        {
            Вывести($"Запускается игра \"{Имя}\"...");
            string списокЛокаций = string.Join(", ", Локации.Select(локация => $"\"{локация.Название}\""));
            Вывести($"Локации игры: {списокЛокаций}.");
            Вывести($"Игрок начинает в локации \"{Настройки.ИгрокВЛокации}\".");

            Вывести("Игра запущена.");
            ОжидатьКлавишу("Нажмите любую клавишу для выхода.");
        }

        public static void ОжидатьКлавишу(string сообщение = null)
        {
            if (сообщение != null)
            {
                Вывести(сообщение);
            }
            Console.ReadKey();
        }

        public static void Вывести(string message)
        {
            Console.WriteLine(message);
        }

        public static void Вывести(ОшибкаОписания ошибкаОписания)
        {
            Вывести("При загрузке игры произошла ошибка:");
            Вывести($"\t{ошибкаОписания.Message}");
        }
    }

    internal class Настройки
    {
        public Настройки(Игра.ОписаниеИгры.ОписаниеНастроек описаниеНастроек)
        {
            ИгрокВЛокации = описаниеНастроек.ИгрокВЛокации;
        }

        public Локация ИгрокВЛокации { get; }
    }

    internal class ОшибкаОписания : Exception
    {
        public ОшибкаОписания(string сообщение) : base(сообщение) { }
    }

    internal class Локация
    {
        public Локация(Игра.ОписаниеИгры.ОписаниеЛокаций.ОписаниеЛокации описаниеЛокации)
        {
            Название = описаниеЛокации.Название;
            Описание = описаниеЛокации.Описание;
        }

        public Локация(string название, string описание)
        {
            Название = название;
            Описание = описание;
        }

        public string Описание { get; }

        public string Название { get; }

        public override string ToString()
        {
            return Название;
        }
    }
}